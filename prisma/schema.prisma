// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  slug     String
  comments Comment[] @relation("PostToComment")
  views    View[]

  @@unique([slug])
}

model Comment {
  id   String @id @default(cuid())
  text String

  // user info
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  // post information
  post    Post    @relation("PostToComment", fields: [postId], references: [slug])
  postId  String
  replies Reply[]
  visible Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String  @id @default(cuid())
  text      String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  visible   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id     String @id @default(cuid())
  ip     String
  post   Post   @relation(fields: [postId], references: [slug])
  postId String

  @@unique([ip, postId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_in Int?
  oauth_token              String? // @db.text
  oauth_token_secret       String? // @db.text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime?
  username      String?   @unique
  blacklisted   Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
